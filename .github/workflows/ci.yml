name: Build + Deploy

on:
  push:
    branches: [master]
    tags: ["v*.*.*"]
  pull_request:
    branches: [master]

env:
  PROJECT_NAME: "cu2qu"
  PROJECT_VERSION: "1.6.7"

jobs:
  build_unix:

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        os: [ubuntu-latest, macos-latest]
        platform: [x64]
    env:
      PLAT: "x86_64"
      UNICODE_WIDTH: 32
      MB_PYTHON_VERSION: ${{ matrix.python-version }}
      TRAVIS_PYTHON_VERSION: ${{ matrix.python-version }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.platform }}
    - name: Set up environment variables
      run: |
        if [ "macos-latest" == "${{ matrix.os }}" ]; then
          echo "TRAVIS_OS_NAME=osx" >> $GITHUB_ENV
        else
          echo "TRAVIS_OS_NAME=ubuntu" >> $GITHUB_ENV
        fi
    - name: Install virtualenv
      run: |
        python -m pip install --upgrade pip
        pip install virtualenv
    - name: Build and Install Wheels
      run: |
        source multibuild/common_utils.sh
        source multibuild/travis_steps.sh
        echo "------- BEFORE INSTALL --------"
        before_install
        echo "------- BUILD WHEEL --------"
        build_index_wheel "${PROJECT_NAME}==${PROJECT_VERSION}"
        echo "------- INSTALL_RUN --------"
        install_run $PLAT
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PROJECT_NAME }}-py${{ matrix.python-version }}-${{ env.TRAVIS_OS_NAME }}-${{ matrix.platform }}
        path: wheelhouse/*.whl

  build_win:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        platform: [x64, x86]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.platform }}
    - name: Set up virtual environment
      run: |
        python -m pip install --upgrade virtualenv
        python -m virtualenv venv
        venv\Scripts\activate
        python -c "import sys; print(sys.version); print(sys.executable)"
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
    - name: Build wheel
      run: |
        venv\Scripts\activate
        pip wheel --no-deps -w wheelhouse --no-cache-dir --no-binary ${{ env.PROJECT_NAME }} ${{ env.PROJECT_NAME }}==${{ env.PROJECT_VERSION }}
    - name: Install the wheel
      shell: cmd
      run: |
        venv\Scripts\activate
        dir /s /b wheelhouse\${{ env.PROJECT_NAME }}*.whl > wheel.pth
        set /p WHEEL_PATH=<wheel.pth
        pip install %WHEEL_PATH%
        python test_import.py
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PROJECT_NAME }}-py${{ matrix.python-version }}-win-${{ matrix.platform }}
        path: wheelhouse/*.whl

  deploy:
    # only run if the commit is tagged...
    if: startsWith(github.ref, 'refs/tags/v')
    # ... and all build jobs completed successfully
    needs:
        - build_unix
        - build_win
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade twine
    - name: Download artifacts from build jobs
      uses: actions/download-artifact@v2
      with:
        path: wheelhouse/
    - name: Move wheels to dist/ directory
      run: |
        ls wheelhouse/*
        mkdir -p dist/
        for wheel_dir in wheelhouse/${{ env.PROJECT_NAME }}*/; do
          mv "${wheel_dir}"/*.whl dist/
        done
    - name: Publish wheels
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        if [ "$IS_PRERELEASE" == true ]; then
          echo "DEBUG: This is a pre-release"
        else
          echo "DEBUG: This is a final release"
        fi
        twine upload dist/${{ env.PROJECT_NAME }}*
